INSERT INTO WFLW_VERSION (SCRIPT) 
VALUES ('V005__add_archive_and_delay.sql');

ALTER TABLE WFLW_WORKFLOW ADD START_WHEN TIMESTAMP;   

DROP TABLE WFLW_ARCHIVED_WORKFLOW_CONTENT;
DROP TABLE WFLW_ARCHIVED_WORKFLOW;

CREATE TABLE WFLW_ARCHIVED_WORKFLOW (
	ID VARCHAR(36) PRIMARY KEY, 	-- UUID
	EXTERNAL_KEY VARCHAR(200),		-- Optional external key 
	WORKFLOW_CLASS VARCHAR(200) NOT NULL,	-- Full class name corresponding to workflow
	USER_ID VARCHAR(10) DEFAULT '',  -- USER ID of user submitting the workflow
	BRANCH_ID VARCHAR(10) DEFAULT '',
	CREATION_TIME TIMESTAMP NOT NULL,
	LAST_UPDATE_TIME TIMESTAMP NOT NULL,
	METHOD VARCHAR(200) NOT NULL,
	METHOD_STARTED TIMESTAMP, 
	METHOD_ENDED TIMESTAMP,
	METHOD_EXCEPTION VARCHAR(200),
	METHOD_EXCEPTION_MESSAGE VARCHAR(2000),
	STACKTRACE clob	
);

CREATE TABLE WFLW_ARCHIVED_WORKFLOW_CONTENT (
	ID VARCHAR(36) PRIMARY KEY,	
	CONTENT blob,
	FOREIGN KEY (ID) REFERENCES WFLW_WORKFLOW(ID)
);

DROP TABLE WFLW_ARCHIVED_WORKFLOW_HISTORY;

CREATE TABLE WFLW_ARCHIVED_WORKFLOW_HISTORY (
	ID VARCHAR(36) NOT NULL,	
	METHOD VARCHAR(200) NOT NULL,
	METHOD_STARTED TIMESTAMP NOT NULL, 
	METHOD_ENDED TIMESTAMP NOT NULL,
	METHOD_EXCEPTION VARCHAR(200),
	METHOD_EXCEPTION_MESSAGE VARCHAR(2000),
	STACKTRACE clob,
	FOREIGN KEY (ID) REFERENCES WFLW_WORKFLOW(ID)
);
